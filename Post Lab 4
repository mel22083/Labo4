/*
 * NombreProgra.c
 *
 * Created: 
 * Author: Willi
 * Description: 
 */
/****************************************/
// Encabezado (Libraries)
#define F_CPU 16000000UL

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

volatile uint8_t valorADC = 0;
volatile uint8_t contador = 0;
volatile uint64_t TimerMillis = 0;

//volatile uint8_t Presionado1 = 0;
//volatile uint8_t Presionado2 = 0;
/****************************************/
// Function prototypes
void setup();
void initADC();
void Timer1_Init();
void Display(uint8_t Simbolo);
void alarma();
/****************************************/
// Main Function

int main(void)
{
	setup();
	Timer1_Init();
	initADC();
	alarma();
	/* Replace with your application code */
	while (1)
	{
	alarma();
		PORTB |= (1 << PB5);
		PORTB &= ~((1 << PB0) | (1 << PB1));
		PORTD = contador;
		_delay_ms(5);  
		
		uint8_t DisplayHigh = valorADC >> 4;      // Bits 7 a 4
		uint8_t DisplayLow = valorADC & 0x0F;       // Bits 3 a 0

		// Muestra en cada display el dígito correspondiente
		PORTB |= (1 << PB0);
		PORTB &= ~((1 << PB5) | (1 << PB1));
		Display(DisplayHigh);
		_delay_ms(5);
		
		PORTB |= (1 << PB1);
		PORTB &= ~((1 << PB5) | (1 << PB0));
		Display(DisplayLow);
		_delay_ms(5);
	}
}

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	
	cli ();
	 
	 UCSR0B = 0x00;
	 DDRD = 0xFF;
	 
	 DDRB = 0xFF;                   
	 
	 DDRC &= ~((1 << PC0) | (1 << PC1));   
	 PORTC |= (1 << PC0) | (1 << PC1);
	 
	 PCICR |= (1 << PCIE1);           
	 PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
	 
	sei();

}

void Timer1_Init(void)
{
	
	TCCR1B |= (1 << WGM12);					// Configura el Timer1 en modo CTC (Clear Timer on Compare Match)
	OCR1A = 249; 							// Establece el valor de comparación para 1 ms
	TCCR1B |= (1 << CS11) | (1 << CS10);	// Selecciona el prescaler 64: CS11=1 y CS10=1
	TIMSK1 |= (1 << OCIE1A);				// Habilita la interrupción de Compare Match A para Timer1
}

void Display(uint8_t Simbolo)
{

	switch(Simbolo)
	{
		case 0x0:  // Dígito 0
		PORTD = 0x7D;
		break;
		case 0x1:  // Dígito 1
		PORTD = 0x11;
		break;
		case 0x2:  // Dígito 2
		PORTD = 0xBC;
		break;
		case 0x3:  // Dígito 3
		PORTD = 0xB5;
		break;
		case 0x4:  // Dígito 4
		PORTD = 0xD1;
		break;
		case 0x5:  // Dígito 5
		PORTD = 0xE5;
		break;
		case 0x6:  // Dígito 6
		PORTD = 0xED;
		break;
		case 0x7:  // Dígito 7
		PORTD = 0x31;
		break;
		case 0x8:  // Dígito 8
		PORTD = 0xFD;
		break;
		case 0x9:  // Dígito 9
		PORTD = 0xF5;
		break;
		case 0xA:  // Dígito A
		PORTD = 0xF9;
		break;
		case 0xB:  // Dígito B
		PORTD = 0xCD;
		break;
		case 0xC:  // Dígito C
		PORTD = 0x6C;
		break;
		case 0xD:  // Dígito D
		PORTD = 0x9D;
		break;
		case 0xE:  // Dígito E
		PORTD = 0xEC;
		break;
		case 0xF:  // Dígito F
		PORTD = 0xE8;
		break;
		default:
		PORTD = 0x00;  
		break;
	}


}

void alarma()
{
		if (valorADC > contador)
{
			PORTB |= (1 << PORTB2);
}
		else
{
			PORTB &= ~(1 << PORTB2);
 }

}
ISR(TIMER1_COMPA_vect)
{
	TimerMillis++;
}

ISR(PCINT1_vect)
{
	
	
	if (!(PINC & (1 << PC1))) 
	{ 
		if (TimerMillis > 150) 
		{
		contador++;  
		TimerMillis = 0;
		}
	}
	
	if (!(PINC & (1 << PC0))) 
	{ 
		if (TimerMillis > 150)
		{
			contador--; 
			TimerMillis = 0;
		}
	}

}



void initADC()
{
	ADMUX = 0;
	ADMUX |= (1 << REFS0) | (1 << ADLAR)| (1 << MUX2) | (1 << MUX1);
	
	ADCSRA = 0;
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE) | (1 << ADEN) | (1 << ADSC);
}
/****************************************/
// Interrupt routines
ISR(ADC_vect)
{
	valorADC = ADCH;
	ADCSRA |= (1 << ADSC);
}
